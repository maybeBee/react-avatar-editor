{"version":3,"file":"index.js","sources":["../src/utils/parse-dom.js","../src/utils/retrieve-image-url.js","../src/index.js"],"sourcesContent":["/* global DOMParser:false */\n\n/*\n * This method uses DOMParser to parse an HTML string into\n * a document.  By using this approach we avoid the potential\n * for XSS attacks on consumers of this component, which would\n * be created by parsing the string via a detached DOM fragment,\n * as in this latter case script in onload attributes will be\n * run in the context of the host page.\n *\n * The drawback to this approach is that browser support is not\n * as wide - IE10 and up along with evergreen browsers.\n */\nconst parseDOM = (str) => {\n  const parser = typeof DOMParser === 'undefined' ? null : new DOMParser()\n\n  if (!parser) {\n    return null\n  }\n\n  return parser.parseFromString(str, 'text/html')\n}\n\nexport default parseDOM\n","import parseDOM from './parse-dom'\n\n/*\n * Retrieves image URL from collection of data transfer\n * items, if one is present.  As the item will contain\n * an HTML string containing an img element, it's\n * necessary to parse the HTML and then pull the src\n * attribute off the image.\n */\nconst retrieveImageURL = (dataTransferItems, callback) => {\n  for (let i = 0; i < dataTransferItems.length; i++) {\n    let item = dataTransferItems[i]\n\n    if (item.type === 'text/html') {\n      item.getAsString(value => {\n        const doc = parseDOM(value)\n        const img = doc.querySelector('img')\n        if (img && img.src) {\n          callback(img.src)\n        }\n      })\n      break\n    }\n  }\n}\n\nexport default retrieveImageURL\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport retrieveImageUrl from './utils/retrieve-image-url'\n\nconst isTouchDevice = !!(\n  typeof window !== 'undefined' &&\n  typeof navigator !== 'undefined' &&\n  ('ontouchstart' in window || navigator.msMaxTouchPoints > 0)\n)\n\nconst isFileAPISupported = typeof File !== 'undefined'\n\nconst draggableEvents = {\n  touch: {\n    react: {\n      down: 'onTouchStart',\n      mouseDown: 'onMouseDown',\n      drag: 'onTouchMove',\n      drop: 'onTouchEnd',\n      move: 'onTouchMove',\n      mouseMove: 'onMouseMove',\n      up: 'onTouchEnd',\n      mouseUp: 'onMouseUp'\n    },\n    native: {\n      down: 'touchstart',\n      mouseDown: 'mousedown',\n      drag: 'touchmove',\n      drop: 'touchend',\n      move: 'touchmove',\n      mouseMove: 'mousemove',\n      up: 'touchend',\n      mouseUp: 'mouseup'\n    }\n  },\n  desktop: {\n    react: {\n      down: 'onMouseDown',\n      drag: 'onDragOver',\n      drop: 'onDrop',\n      move: 'onMouseMove',\n      up: 'onMouseUp'\n    },\n    native: {\n      down: 'mousedown',\n      drag: 'dragStart',\n      drop: 'drop',\n      move: 'mousemove',\n      up: 'mouseup'\n    }\n  }\n}\nconst deviceEvents = isTouchDevice\n  ? draggableEvents.touch\n  : draggableEvents.desktop\n\nconst pixelRatio =\n  typeof window !== 'undefined' && window.devicePixelRatio\n    ? window.devicePixelRatio\n    : 1\n\n// Draws a rounded rectangle on a 2D context.\nconst drawRoundedRect = (context, x, y, width, height, borderRadius) => {\n  if (borderRadius === 0) {\n    context.rect(x, y, width, height)\n  } else {\n    const widthMinusRad = width - borderRadius\n    const heightMinusRad = height - borderRadius\n    context.translate(x, y)\n    context.arc(\n      borderRadius,\n      borderRadius,\n      borderRadius,\n      Math.PI,\n      Math.PI * 1.5\n    )\n    context.lineTo(widthMinusRad, 0)\n    context.arc(\n      widthMinusRad,\n      borderRadius,\n      borderRadius,\n      Math.PI * 1.5,\n      Math.PI * 2\n    )\n    context.lineTo(width, heightMinusRad)\n    context.arc(\n      widthMinusRad,\n      heightMinusRad,\n      borderRadius,\n      Math.PI * 2,\n      Math.PI * 0.5\n    )\n    context.lineTo(borderRadius, height)\n    context.arc(\n      borderRadius,\n      heightMinusRad,\n      borderRadius,\n      Math.PI * 0.5,\n      Math.PI\n    )\n    context.translate(-x, -y)\n  }\n}\n\nclass AvatarEditor extends React.Component {\n  static propTypes = {\n    scale: PropTypes.number,\n    rotate: PropTypes.number,\n    image: PropTypes.oneOfType([\n      PropTypes.string,\n      ...(isFileAPISupported ? [PropTypes.instanceOf(File)] : [])\n    ]),\n    border: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.arrayOf(PropTypes.number)\n    ]),\n    borderRadius: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number\n    }),\n    color: PropTypes.arrayOf(PropTypes.number),\n    style: PropTypes.object,\n    crossOrigin: PropTypes.oneOf(['', 'anonymous', 'use-credentials']),\n\n    onDropFile: PropTypes.func,\n    onLoadFailure: PropTypes.func,\n    onLoadSuccess: PropTypes.func,\n    onImageReady: PropTypes.func,\n    onImageChange: PropTypes.func,\n    onMouseUp: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onPositionChange: PropTypes.func,\n\n    disableDrop: PropTypes.bool\n  }\n\n  static defaultProps = {\n    disableDrop: false,\n    scale: 1,\n    rotate: 0,\n    border: 25,\n    borderRadius: 0,\n    width: 200,\n    height: 200,\n    color: [0, 0, 0, 0.5],\n    style: {},\n    onDropFile () {},\n    onLoadFailure () {},\n    onLoadSuccess () {},\n    onImageReady () {},\n    onImageChange () {},\n    onMouseUp () {},\n    onMouseMove () {},\n    onPositionChange () {}\n  }\n\n  state = {\n    drag: false,\n    my: null,\n    mx: null,\n    image: {\n      x: 0.5,\n      y: 0.5\n    }\n  }\n\n  isVertical () {\n    return this.props.rotate % 180 !== 0\n  }\n\n  getBorders (border = this.props.border) {\n    return Array.isArray(border) ? border : [border, border]\n  }\n\n  getDimensions () {\n    const { width, height, rotate, border } = this.props\n\n    const canvas = {}\n\n    const [borderX, borderY] = this.getBorders(border)\n\n    const canvasWidth = width\n    const canvasHeight = height\n\n    if (this.isVertical()) {\n      canvas.width = canvasHeight\n      canvas.height = canvasWidth\n    } else {\n      canvas.width = canvasWidth\n      canvas.height = canvasHeight\n    }\n\n    canvas.width += borderX * 2\n    canvas.height += borderY * 2\n\n    return {\n      canvas,\n      rotate,\n      width,\n      height,\n      border\n    }\n  }\n\n  getImage () {\n    // get relative coordinates (0 to 1)\n    const cropRect = this.getCroppingRect()\n    const image = this.state.image\n\n    // get actual pixel coordinates\n    cropRect.x *= image.resource.width\n    cropRect.y *= image.resource.height\n    cropRect.width *= image.resource.width\n    cropRect.height *= image.resource.height\n\n    // create a canvas with the correct dimensions\n    const canvas = document.createElement('canvas')\n\n    if (this.isVertical()) {\n      canvas.width = cropRect.height\n      canvas.height = cropRect.width\n    } else {\n      canvas.width = cropRect.width\n      canvas.height = cropRect.height\n    }\n\n    // draw the full-size image at the correct position,\n    // the image gets truncated to the size of the canvas.\n    const context = canvas.getContext('2d')\n\n    context.translate(canvas.width / 2, canvas.height / 2)\n    context.rotate(this.props.rotate * Math.PI / 180)\n    context.translate(-(canvas.width / 2), -(canvas.height / 2))\n\n    if (this.isVertical()) {\n      context.translate(\n        (canvas.width - canvas.height) / 2,\n        (canvas.height - canvas.width) / 2\n      )\n    }\n\n    context.drawImage(image.resource, -cropRect.x, -cropRect.y)\n\n    return canvas\n  }\n\n  /**\n   * Get the image scaled to original canvas size.\n   * This was default in 4.x and is now kept as a legacy method.\n   */\n  getImageScaledToCanvas () {\n    const { width, height } = this.getDimensions()\n\n    const canvas = document.createElement('canvas')\n\n    if (this.isVertical()) {\n      canvas.width = height\n      canvas.height = width\n    } else {\n      canvas.width = width\n      canvas.height = height\n    }\n\n    // don't paint a border here, as it is the resulting image\n    this.paintImage(canvas.getContext('2d'), this.state.image, 0, 1)\n\n    return canvas\n  }\n\n  getXScale () {\n    const canvasAspect = this.props.width / this.props.height\n    const imageAspect = this.state.image.width / this.state.image.height\n\n    return Math.min(1, canvasAspect / imageAspect)\n  }\n\n  getYScale () {\n    const canvasAspect = this.props.height / this.props.width\n    const imageAspect = this.state.image.height / this.state.image.width\n\n    return Math.min(1, canvasAspect / imageAspect)\n  }\n\n  getCroppingRect () {\n    const position = this.props.position || {\n      x: this.state.image.x,\n      y: this.state.image.y\n    }\n    const width = 1 / this.props.scale * this.getXScale()\n    const height = 1 / this.props.scale * this.getYScale()\n\n    const croppingRect = {\n      x: position.x - width / 2,\n      y: position.y - height / 2,\n      width,\n      height\n    }\n\n    let xMin = 0\n    let xMax = 1 - croppingRect.width\n    let yMin = 0\n    let yMax = 1 - croppingRect.height\n\n    // If the cropping rect is larger than the image, then we need to change\n    // our maxima & minima for x & y to allow the image to appear anywhere up\n    // to the very edge of the cropping rect.\n    const isLargerThanImage = width > 1 || height > 1\n\n    if (isLargerThanImage) {\n      xMin = -croppingRect.width\n      xMax = 1\n      yMin = -croppingRect.height\n      yMax = 1\n    }\n\n    return {\n      ...croppingRect,\n      x: Math.max(xMin, Math.min(croppingRect.x, xMax)),\n      y: Math.max(yMin, Math.min(croppingRect.y, yMax))\n    }\n  }\n\n  isDataURL (str) {\n    if (str === null) {\n      return false\n    }\n    const regex = /^\\s*data:([a-z]+\\/[a-z]+(;[a-z-]+=[a-z-]+)?)?(;base64)?,[a-z0-9!$&',()*+;=\\-._~:@/?%\\s]*\\s*$/i\n    return !!str.match(regex)\n  }\n\n  loadImage (image) {\n    if (isFileAPISupported && image instanceof File) {\n      this.loadImageFile(image)\n    } else if (typeof image === 'string') {\n      this.loadImageURL(image)\n    }\n  }\n\n  loadImageURL (imageURL) {\n    const imageObj = new Image()\n    imageObj.onload = this.handleImageReady.bind(this, imageObj)\n    imageObj.onerror = this.props.onLoadFailure\n    if (!this.isDataURL(imageURL) && this.props.crossOrigin) { imageObj.crossOrigin = this.props.crossOrigin }\n    imageObj.src = imageURL\n  }\n\n  loadImageFile (imageFile) {\n    const reader = new FileReader()\n    reader.onload = e => this.loadImageURL(e.target.result)\n    reader.readAsDataURL(imageFile)\n  }\n\n  componentDidMount () {\n    const context = ReactDOM.findDOMNode(this.canvas).getContext('2d')\n    if (this.props.image) {\n      this.loadImage(this.props.image)\n    }\n    this.paint(context)\n    if (document) {\n      const nativeEvents = deviceEvents.native\n      document.addEventListener(nativeEvents.move, this.handleMouseMove, false)\n      document.addEventListener(nativeEvents.up, this.handleMouseUp, false)\n      if (isTouchDevice) {\n        document.addEventListener(\n          nativeEvents.mouseMove,\n          this.handleMouseMove,\n          false\n        )\n        document.addEventListener(\n          nativeEvents.mouseUp,\n          this.handleMouseUp,\n          false\n        )\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (document) {\n      const nativeEvents = deviceEvents.native\n      document.removeEventListener(\n        nativeEvents.move,\n        this.handleMouseMove,\n        false\n      )\n      document.removeEventListener(nativeEvents.up, this.handleMouseUp, false)\n      if (isTouchDevice) {\n        document.removeEventListener(\n          nativeEvents.mouseMove,\n          this.handleMouseMove,\n          false\n        )\n        document.removeEventListener(\n          nativeEvents.mouseUp,\n          this.handleMouseUp,\n          false\n        )\n      }\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const canvas = ReactDOM.findDOMNode(this.canvas)\n    const context = canvas.getContext('2d')\n    context.clearRect(0, 0, canvas.width, canvas.height)\n    this.paint(context)\n    this.paintImage(context, this.state.image, this.props.border)\n\n    if (\n      prevProps.image !== this.props.image ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      prevProps.position !== this.props.position ||\n      prevProps.scale !== this.props.scale ||\n      prevProps.rotate !== this.props.rotate ||\n      prevState.my !== this.state.my ||\n      prevState.mx !== this.state.mx ||\n      prevState.image.x !== this.state.image.x ||\n      prevState.image.y !== this.state.image.y\n    ) {\n      this.props.onImageChange()\n    }\n  }\n\n  handleImageReady (image) {\n    const imageState = this.getInitialSize(image.width, image.height)\n    imageState.resource = image\n    imageState.x = 0.5\n    imageState.y = 0.5\n    this.setState({ drag: false, image: imageState }, this.props.onImageReady)\n    this.props.onLoadSuccess(imageState)\n  }\n\n  getInitialSize (width, height) {\n    let newHeight\n    let newWidth\n\n    const dimensions = this.getDimensions()\n    const canvasRatio = dimensions.height / dimensions.width\n    const imageRatio = height / width\n\n    if (canvasRatio > imageRatio) {\n      newHeight = this.getDimensions().height\n      newWidth = width * (newHeight / height)\n    } else {\n      newWidth = this.getDimensions().width\n      newHeight = height * (newWidth / width)\n    }\n\n    return {\n      height: newHeight,\n      width: newWidth\n    }\n  }\n\n  componentWillReceiveProps (newProps) {\n    if (\n      (newProps.image && this.props.image !== newProps.image) ||\n      this.props.width !== newProps.width ||\n      this.props.height !== newProps.height\n    ) {\n      this.loadImage(newProps.image)\n    }\n  }\n\n  paintImage (context, image, border, scaleFactor = pixelRatio) {\n    if (image.resource) {\n      const position = this.calculatePosition(image, border)\n\n      context.save()\n\n      context.translate(context.canvas.width / 2, context.canvas.height / 2)\n      context.rotate(this.props.rotate * Math.PI / 180)\n      context.translate(\n        -(context.canvas.width / 2),\n        -(context.canvas.height / 2)\n      )\n\n      if (this.isVertical()) {\n        context.translate(\n          (context.canvas.width - context.canvas.height) / 2,\n          (context.canvas.height - context.canvas.width) / 2\n        )\n      }\n\n      context.scale(scaleFactor, scaleFactor)\n\n      context.globalCompositeOperation = 'destination-over'\n      context.drawImage(\n        image.resource,\n        position.x,\n        position.y,\n        position.width + border * 2,\n        position.height + border * 2\n      )\n\n      context.restore()\n    }\n  }\n\n  calculatePosition (image, border) {\n    image = image || this.state.image\n\n    const croppingRect = this.getCroppingRect()\n\n    const width = image.width * this.props.scale\n    const height = image.height * this.props.scale\n\n    let x = -croppingRect.x * width\n    let y = -croppingRect.y * height\n\n    return {\n      x,\n      y,\n      height,\n      width\n    }\n  }\n\n  paint (context) {\n    context.save()\n    context.scale(pixelRatio, pixelRatio)\n    context.translate(0, 0)\n    context.fillStyle = 'rgba(' + this.props.color.slice(0, 4).join(',') + ')'\n\n    let borderRadius = this.props.borderRadius\n    const dimensions = this.getDimensions()\n    const [borderSizeX, borderSizeY] = this.getBorders(dimensions.border)\n    const height = dimensions.canvas.height\n    const width = dimensions.canvas.width\n\n    // clamp border radius between zero (perfect rectangle) and half the size without borders (perfect circle or \"pill\")\n    borderRadius = Math.max(borderRadius, 0)\n    borderRadius = Math.min(\n      borderRadius,\n      width / 2 - borderSizeX,\n      height / 2 - borderSizeY\n    )\n\n    context.beginPath()\n    // inner rect, possibly rounded\n    drawRoundedRect(\n      context,\n      borderSizeX,\n      borderSizeY,\n      width - borderSizeX * 2,\n      height - borderSizeY * 2,\n      borderRadius\n    )\n    context.rect(width, 0, -width, height) // outer rect, drawn \"counterclockwise\"\n    context.fill('evenodd')\n\n    context.restore()\n  }\n\n  handleMouseDown = (e) => {\n    e = e || window.event\n    // if e is a touch event, preventDefault keeps\n    // corresponding mouse events from also being fired\n    // later.\n    e.preventDefault()\n    this.setState({\n      drag: true,\n      mx: null,\n      my: null\n    })\n  }\n  handleMouseUp = () => {\n    if (this.state.drag) {\n      this.setState({ drag: false })\n      this.props.onMouseUp()\n    }\n  }\n\n  handleMouseMove = (e) => {\n    e = e || window.event\n    if (this.state.drag === false) {\n      return\n    }\n\n    const mousePositionX = e.targetTouches\n      ? e.targetTouches[0].pageX\n      : e.clientX\n    const mousePositionY = e.targetTouches\n      ? e.targetTouches[0].pageY\n      : e.clientY\n\n    const newState = {\n      mx: mousePositionX,\n      my: mousePositionY\n    }\n\n    let rotate = this.props.rotate\n\n    rotate %= 360\n    rotate = rotate < 0 ? rotate + 360 : rotate\n\n    if (this.state.mx && this.state.my) {\n      const mx = this.state.mx - mousePositionX\n      const my = this.state.my - mousePositionY\n\n      const width = this.state.image.width * this.props.scale\n      const height = this.state.image.height * this.props.scale\n\n      let { x: lastX, y: lastY } = this.getCroppingRect()\n\n      lastX *= width\n      lastY *= height\n\n      // helpers to calculate vectors\n      const toRadians = degree => degree * (Math.PI / 180)\n      const cos = Math.cos(toRadians(rotate))\n      const sin = Math.sin(toRadians(rotate))\n\n      const x = lastX + mx * cos + my * sin\n      const y = lastY + -mx * sin + my * cos\n\n      const relativeWidth = 1 / this.props.scale * this.getXScale()\n      const relativeHeight = 1 / this.props.scale * this.getYScale()\n\n      const position = {\n        x: x / width + relativeWidth / 2,\n        y: y / height + relativeHeight / 2\n      }\n\n      this.props.onPositionChange(position)\n\n      newState.image = {\n        ...this.state.image,\n        ...position\n      }\n    }\n\n    this.setState(newState)\n\n    this.props.onMouseMove(e)\n  }\n\n  handleDragOver = (e) => {\n    e = e || window.event\n    e.preventDefault()\n  }\n\n  handleDrop = (e = window.event) => {\n    e.stopPropagation()\n    e.preventDefault()\n\n    if (e.dataTransfer) {\n      const { files, items } = e.dataTransfer\n\n      if (files && files.length) {\n        this.props.onDropFile(e)\n        this.loadImageFile(files[0])\n      } else if (items && items.length) {\n        retrieveImageUrl(items, src => this.loadImage(src))\n      }\n    }\n  }\n\n  setCanvas = (canvas) => {\n    this.canvas = canvas\n  }\n\n  render () {\n    const dimensions = this.getDimensions()\n    const defaultStyle = {\n      width: dimensions.canvas.width,\n      height: dimensions.canvas.height,\n      cursor: this.state.drag ? 'grabbing' : 'grab'\n    }\n\n    const attributes = {\n      width: dimensions.canvas.width * pixelRatio,\n      height: dimensions.canvas.height * pixelRatio,\n      style: {\n        ...defaultStyle,\n        ...this.props.style\n      }\n    }\n\n    attributes[deviceEvents.react.down] = this.handleMouseDown\n    attributes[deviceEvents.react.drag] = this.handleDragOver\n    if (!this.props.disableDrop) { attributes[deviceEvents.react.drop] = this.handleDrop }\n    if (isTouchDevice) { attributes[deviceEvents.react.mouseDown] = this.handleMouseDown }\n\n    return <canvas ref={this.setCanvas} {...attributes} />\n  }\n}\n\nexport default AvatarEditor\n"],"names":["parseDOM","str","parser","DOMParser","parseFromString","retrieveImageURL","dataTransferItems","callback","i","length","item","type","getAsString","img","value","querySelector","src","isTouchDevice","window","navigator","msMaxTouchPoints","isFileAPISupported","File","draggableEvents","deviceEvents","touch","desktop","pixelRatio","devicePixelRatio","AvatarEditor","state","handleMouseDown","e","event","preventDefault","setState","handleMouseUp","_this","drag","props","onMouseUp","handleMouseMove","mousePositionX","targetTouches","pageX","clientX","mousePositionY","pageY","clientY","newState","rotate","mx","my","width","image","scale","height","getCroppingRect","lastX","x","lastY","y","toRadians","degree","Math","PI","cos","sin","position","getXScale","getYScale","onPositionChange","onMouseMove","handleDragOver","handleDrop","stopPropagation","dataTransfer","files","items","onDropFile","loadImageFile","loadImage","setCanvas","canvas","React","Component","this","border","Array","isArray","getBorders","borderX","borderY","canvasWidth","canvasHeight","isVertical","cropRect","resource","document","createElement","context","getContext","translate","drawImage","getDimensions","paintImage","canvasAspect","imageAspect","min","croppingRect","xMin","xMax","yMin","yMax","max","match","loadImageURL","imageURL","imageObj","Image","onload","handleImageReady","bind","onerror","onLoadFailure","isDataURL","crossOrigin","imageFile","reader","FileReader","_this2","target","result","readAsDataURL","ReactDOM","findDOMNode","paint","nativeEvents","native","addEventListener","move","up","mouseMove","mouseUp","removeEventListener","prevProps","prevState","clearRect","onImageChange","imageState","getInitialSize","onImageReady","onLoadSuccess","newHeight","newWidth","dimensions","newProps","scaleFactor","calculatePosition","save","globalCompositeOperation","restore","fillStyle","color","slice","join","borderRadius","borderSizeX","borderSizeY","beginPath","rect","widthMinusRad","heightMinusRad","arc","lineTo","fill","defaultStyle","attributes","style","react","down","disableDrop","drop","mouseDown","ref","propTypes","PropTypes","number","oneOfType","string","instanceOf","arrayOf","shape","object","oneOf","func","bool","defaultProps"],"mappings":"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"}